{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"aftctl - Facilitates the AFT deployment process.","text":"<p><code>aftctl</code> is a CLI designed to simplify the deployment process of Amazon Account Factory for Terraform (AFT). It follows best practices for Terraform state file isolation, making it easier for you to manage state files securely and efficiently. Additionally, <code>aftctl</code> facilitates seamless upgrades and modifications to your AFT configurations in the future. It is written in Go and it welcomes contributions from the community.</p> <p>Deploy aft in the management account</p> <pre><code>aftctl aft deploy \\\n--region=\"us-east-1\" \\ \n--aft-account-id=$AFT_ACCOUNT_ID \\ \n--ct-home-region=\"us-east-1\" \\ \n--ct-seccondary-region=\"sa-east-1\" \\ \n--ct-audit-account-id=$CT_AUDIT_ACCOUNT_ID \\ \n--ct-log-archive-account-id=$CT_LOG_ARCHIVE_ACCOUNT_ID \\ \n--ct-management-account-id=$CT_MANAGEMENT_ACCOUNT_ID \n</code></pre> <p></p> <p>The deployment will happen in the management account with:</p> <ul> <li>the resources will have the default name</li> <li>the resources will reside in the <code>us-east-1</code> region</li> <li>the deployment will happen inside the AWS CodePipeline</li> <li>the state will be stored in the S3 Bucket</li> <li>the terraform files are in the AWS CodeCommit</li> </ul> <p>Example output:</p> <pre><code>09/09/2023 23:29:13     INFO    \ud83d\udd12 IAM Role aft-deployment-codepipeline-service-role doesn't exists... creating\n09/09/2023 23:29:13     INFO    \ud83d\udd12 IAM Role aft-deployment-codepipeline-service-role successfully created\n09/09/2023 23:29:13     INFO    \ud83d\udd12 IAM Role aft-deployment-codebuild-service-role doesn't exists... creating\n09/09/2023 23:29:14     INFO    \ud83d\udd12 IAM Role aft-deployment-codebuild-service-role successfully created\n09/09/2023 23:29:14     INFO    \ud83e\udea3 S3 bucket ************-aft-deployment-terraform-tfstate doesn't exists... creating\n09/09/2023 23:29:15     INFO    \ud83e\udea3 Waiting for bucket \"************-aft-deployment-terraform-tfstate\" to be created...\n09/09/2023 23:29:26     INFO    \ud83e\udea3 S3 Bucket ************-aft-deployment-terraform-tfstate successfully created\n09/09/2023 23:29:27     INFO    \ud83e\udea3 S3 bucket ************-aft-deployment-codepipeline-artifact doesn't exists... creating\n09/09/2023 23:29:28     INFO    \ud83e\udea3 Waiting for bucket \"************-aft-deployment-codepipeline-artifact\" to be created...\n09/09/2023 23:29:39     INFO    \ud83e\udea3 S3 Bucket ************-aft-deployment-codepipeline-artifact successfully created\n09/09/2023 23:29:39     INFO    \ud83d\udcc1 Directory aft-deployment successfully created\n09/09/2023 23:29:39     INFO    \ud83d\udcc4 File ./aft-deployment/backend.tf successfully created\n09/09/2023 23:29:39     INFO    \ud83d\udcc4 File ./aft-deployment/buildspec.yaml successfully created\n09/09/2023 23:29:39     INFO    \ud83d\udcc4 File ./aft-deployment/main.tf successfully created\n09/09/2023 23:29:39     INFO    \ud83d\udce6 File ./aft-deployment.zip successfully created\n09/09/2023 23:29:39     INFO    \u2b06\ufe0f zip file aft-deployment.zip successfully uploaded\n09/09/2023 23:29:40     INFO    \ud83d\udcda Cloudformation stack aft-deployment-cloudformation-stack doesn't exists... creating\n09/09/2023 23:29:40     INFO    \ud83d\udd12 Cloudformation stack aft-deployment-cloudformation-stack successfuly created\n09/09/2023 23:29:41     INFO    \ud83d\udee0\ufe0f CodeBuild project aft-deployment-build doesn't exists... creating\n09/09/2023 23:29:41     INFO    \ud83d\udee0\ufe0f CodeBuild Project aft-deployment-build successfully created\n09/09/2023 23:29:42     INFO    \ud83d\udc77 CodePipeline pipeline aft-deployment-pipeline doesn't exists... creating\n09/09/2023 23:29:43     INFO    \ud83d\udc77 CodePipeline Pipeline aft-deployment-pipeline successfully created\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installation","title":"Installation","text":"<p><code>aftctl</code> is available to install from official releases as described below. I recommend that you install <code>aftctl</code> from only the official GitHub releases.</p>"},{"location":"install/#for-mac","title":"For Mac","text":"<p>To download the latest release, run:</p> <pre><code># for ARM systems, set ARCH to: `arm64`\nARCH=x86_64\n\ncurl -sLO \"https://github.com/edgarsilva948/aftctl/releases/latest/download/aftctl_Darwin_$ARCH.tar.gz\"\n\n# (Optional) Verify checksum\ncurl -sL \"https://github.com/edgarsilva948/aftctl/releases/latest/download/checksums.txt\" | grep $ARCH | sha256sum --check\n\ntar -xzf aftctl_Darwin_$ARCH.tar.gz -C /tmp &amp;&amp; rm aftctl_Darwin_$ARCH.tar.gz\n\nsudo mv /tmp/aftctl /usr/local/bin\n</code></pre>"},{"location":"install/#for-linux","title":"For Linux","text":"<p>To download the latest release, run:</p> <pre><code># for ARM systems, set ARCH to: `arm64` or `i386`\nARCH=x86_64\n\ncurl -sLO \"https://github.com/edgarsilva948/aftctl/releases/latest/download/aftctl_Linux_$ARCH.tar.gz\"\n\n# (Optional) Verify checksum\ncurl -sL \"https://github.com/edgarsilva948/aftctl/releases/latest/download/checksums.txt\" | grep $ARCH | sha256sum --check\n\ntar -xzf aftctl_Linux_$ARCH.tar.gz -C /tmp &amp;&amp; rm aftctl_Linux_$ARCH.tar.gz\n\nsudo mv /tmp/aftctl /usr/local/bin\n</code></pre>"},{"location":"install/#for-windows","title":"For Windows","text":""},{"location":"install/#direct-download-latest-release-x86_64-arm64-i386","title":"Direct download (latest release): x86_64 - ARM64 - i386","text":"<p>Make sure to unzip the archive to a folder in the <code>PATH</code> variable. </p> <p>Optionally, verify the checksum: </p> <ol> <li>Download the checksum file: latest</li> <li>Use Command Prompt to manually compare <code>CertUtil</code>'s output to the checksum file downloaded.  <pre><code># Replace x86_64 with ARM64 or i386\nCertUtil -hashfile aftctl_Windows_x86_64.zip SHA256\n</code></pre></li> <li>Using PowerShell to automate the verification using the <code>-eq</code> operator to get a <code>True</code> or <code>False</code> result: <pre><code># Replace x86_64 with ARM64 or i386\n(Get-FileHash -Algorithm SHA256 .\\aftctl_Windows_x86_64.zip).Hash -eq ((Get-Content .\\checksums.txt) -match 'aftctl_Windows_x86_64.zip' -split ' ')[0]\n</code></pre></li> </ol>"},{"location":"usage/aft-with-codecommit-and-tf-oss/","title":"Deploying AFT with AWS CodeCommit and Terraform OSS","text":""},{"location":"usage/aft-with-codecommit-and-tf-oss/#deployment","title":"Deployment","text":"<p>Deploying AFT informing only the required variables:</p> <pre><code>aftctl aft deploy \\\n--region=\"us-east-1\" \\ \n--aft-account-id=$AFT_ACCOUNT_ID \\ \n--ct-home-region=\"us-east-1\" \\ \n--ct-seccondary-region=\"sa-east-1\" \\ \n--ct-audit-account-id=$CT_AUDIT_ACCOUNT_ID \\ \n--ct-log-archive-account-id=$CT_LOG_ARCHIVE_ACCOUNT_ID \\ \n--ct-management-account-id=$CT_MANAGEMENT_ACCOUNT_ID \n</code></pre> Info <p>This documentation is deploying the AFT following the official example found <code>here</code>.</p> <p>In case you want to customize something, this section covers all the available parameters:</p> <p>Terraform flags:</p> flag type use default value --terraform-state-bucket-name string Name of the deployment terraform state bucket (default \"aft-deployment-terraform-tfstate\") \"aft-deployment-terraform-tfstate\" --terraform-version string Terraform version to be used in the deployment and for AFT (default \"1.5.6\") \"1.5.6\" --terraform-distribution string Terraform distribution: oss/tfc oss <p>Control Tower flags:</p> flag type use default value --ct-management-account-id string Control Tower Management account id (aka payer/root/master account) \"\" --ct-log-archive-account-id string Control Tower Log Archive account id \"\" --ct-audit-account-id string Control Tower Audit account id \"\" --ct-home-region string Control Tower main region \"\" --ct-seccondary-region string Control Tower seccondary region \"\" <p>AFT flags:</p> flag type use default value --aft-account-id string AFT Management account ID \"\" --aft-enable-metrics-reporting bool Whether to enable reporting metrics or not (default true) true --aft-enable-cloudtrail-data-events bool Whether to enable cloudtrail data events (default true) true --aft-enable-enterprise-support bool Whether to enable enterprise support in created accounts (default true) true --aft-delete-default-vpc bool Whether to enable enterprise support in created accounts (default true) true <p>Deployment flags:</p> flag type use default value --region string The region where the aft deployment resources will be created \"\" --branch string CodeCommit default branch name \"main\" --repository-name string CodeCommit default repository name \"aft-deployment\" --repository-description string CodeCommit default repository description \"CodeCommit repository to store the AFT deployment files\" --codepipeline-bucket-name string CodePipeline default artifact bucket \"aft-deployment-codepipeline-artifact\" --docker-image string CodeBuild default Docker Image name \"aws/codebuild/amazonlinux2-x86_64-standard:4.0\" --code-pipeline-role-name string CodePipeline default role name \"aft-deployment-codepipeline-service-role\" --code-build-role-name string CodeBuild default role name \"aft-deployment-codebuild-service-role\" --code-pipeline-role-policy-name string CodePipeline default role policy name \"aft-deployment-codepipeline-service-role-policy\" --code-build-role-policy-name string CodeBuild default role policy name \"aft-deployment-build-service-role-policy\" --code-build-project-name string CodeBuild default project to deploy AFT \"aft-deployment-build\" --codepipeline-pipeline-name string CodePipeline default pipeline to deploy AFT \"aft-deployment-pipeline\""},{"location":"usage/aftctl-local/","title":"Running Account Factory for Terraform (AFT) code locally","text":""},{"location":"usage/aftctl-local/#example-terraform-init","title":"Example: <code>terraform init</code>","text":"Note <p>You will need to run the aftctl inside the <code>terraform</code> directory, e.g.: aft-global-customizations/terraform.</p> <p>Running a terraform init for aft-global-customizations locally</p> <pre><code>aftctl local -a 111111111111 -c init\n</code></pre> <p>Example output:</p> <pre><code>13/09/2023 21:32:30     INFO    \ud83d\udcdd Initializing AWS Client using AFT Account credentials... step (1/4)\n13/09/2023 21:32:32     INFO    \ud83d\udd04 Successfully set up AWS profile 000000000000-AWSAFTAdmin Step (2/4)\n13/09/2023 21:32:33     INFO    \u2699\ufe0f .gitignore successfully generated... (3/4)\n13/09/2023 21:32:33     INFO    \u26cf\ufe0f  Executing Terraform command init... (4/4)\nOutput:\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Reusing previous version of hashicorp/aws from the dependency lock file\n- Using previously-installed hashicorp/aws v5.16.2\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n</code></pre>"},{"location":"usage/aftctl-local/#example-terraform-plan","title":"Example: <code>terraform plan</code>","text":"Note <p>You will need to run the aftctl inside the <code>terraform</code> directory, e.g.: aft-global-customizations/terraform.</p> <p>Running a terraform plan for aft-global-customizations locally</p> <pre><code>aftctl local -a 111111111111 -c plan\n</code></pre> <p>Example output:</p> <pre><code>13/09/2023 21:31:56     INFO    \ud83d\udcdd Initializing AWS Client using AFT Account credentials... step (1/4)\n13/09/2023 21:31:58     INFO    \ud83d\udd04 Successfully set up AWS profile 000000000000-AWSAFTAdmin Step (2/4)\n13/09/2023 21:31:58     INFO    \u2699\ufe0f .gitignore successfully generated... (3/4)\n13/09/2023 21:31:58     INFO    \u26cf\ufe0f  Executing Terraform command plan... (4/4)\nOutput:\nAcquiring state lock. This may take a few moments...\ndata.aws_region.current: Reading...\ndata.aws_caller_identity.current: Reading...\ndata.aws_region.current: Read complete after 0s [id=us-east-1]\ndata.aws_caller_identity.current: Read complete after 0s [id=111111111111]\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration\nand found no differences, so no changes are needed.\nReleasing state lock. This may take a few moments...\n</code></pre>"},{"location":"usage/aftctl-local/#example-terraform-apply","title":"Example: <code>terraform apply</code>","text":"Note <p>You will need to run the aftctl inside the <code>terraform</code> directory, e.g.: aft-global-customizations/terraform.</p> <p>Running a terraform apply for aft-global-customizations locally</p> <pre><code>aftctl local -a 111111111111 -c apply\n</code></pre> <p>Example output:</p> <pre><code>13/09/2023 21:30:05     INFO    \ud83d\udcdd Initializing AWS Client using AFT Account credentials... step (1/4)\n13/09/2023 21:30:08     INFO    \ud83d\udd04 Successfully set up AWS profile 000000000000-AWSAFTAdmin Step (2/4)\n13/09/2023 21:30:08     INFO    \u2699\ufe0f .gitignore successfully generated... (3/4)\n13/09/2023 21:30:08     INFO    \u26cf\ufe0f  Executing Terraform command apply... (4/4)\nOutput:\nAcquiring state lock. This may take a few moments...\ndata.aws_region.current: Reading...\ndata.aws_caller_identity.current: Reading...\ndata.aws_region.current: Read complete after 0s [id=us-east-1]\ndata.aws_caller_identity.current: Read complete after 1s [id=111111111111]\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration\nand found no differences, so no changes are needed.\nReleasing state lock. This may take a few moments...\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n</code></pre>"},{"location":"usage/deploy-prereqs/","title":"Prerequisites","text":""},{"location":"usage/deploy-prereqs/#credentials","title":"Credentials","text":"<p>You will need to have AWS API credentials from your Management Account configured.</p> Info <p>As described <code>here</code> you will need to have AdministratorAccess to allow AFT Account to launch products from AWS Control Tower Account Factory Portfolio.</p> <p>You can use <code>~/.aws/credentials</code> file or environment variables. For more information read AWS documentation.</p>"},{"location":"usage/deploy-prereqs/#foundation","title":"Foundation","text":"<p>An AWS Control Tower landing zone. For more information, see Plan your AWS Control Tower landing zone.</p> <p>A home Region for your AWS Control Tower landing zone. For more information, see How AWS Regions work with AWS Control Tower.</p> <p>A Terraform version and distribution. For more information, see Terraform and AFT versions.</p> <p>A VCS provider for tracking and managing changes to code and other files.</p>"},{"location":"usage/deploy-prereqs/#organizations","title":"Organizations","text":"<p>Create a new organizational unit for AFT (Optional)</p> <p>Provision the AFT management account</p>"},{"location":"usage/local-prereqs/","title":"Prerequisites","text":""},{"location":"usage/local-prereqs/#credentials","title":"Credentials","text":"<p>1. Set the AWS Region for AFT:  </p> <p>Export the AWS region that corresponds to your AFT environment by executing the following command in your terminal:</p> <pre><code>export AWS_REGION=\"us-east-1\"\n</code></pre> <p>Make sure you have valid AWS credentials for accessing the AFT account. These credentials can either be:</p> <ul> <li>Stored as environment variables (AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY)</li> <li>Configured in an AWS credentials file (commonly located at ~/.aws/credentials)</li> </ul> <p>2. Clone the Necessary Repository:</p> <p>Obtain a local copy of either the <code>aft-account-customizations</code> or <code>aft-global-customizations</code> repository by running:</p> <pre><code>git clone &lt;REPOSITORY-URL&gt;\n</code></pre> <p>3. Install Terraform:</p> <p>Confirm that the Terraform CLI is installed and that its binary is accessible from your system's <code>PATH</code>. You can verify this by running:</p> <p><pre><code>terraform --version\n</code></pre> If Terraform is not yet installed, you can follow the official installation to set it up.</p> <p>By satisfying these prerequisites, you will be well-prepared to utilize the local command effectively.</p>"}]}